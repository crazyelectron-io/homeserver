---
services:

  # --- postgresgotify - create user and database in postgresdb cluster
  postgresgotify:
    image: docker.io/library/postgres:16
    container_name: postgresgotify
    hostname: postgresgotify
    env_file: .env
    restart: "no"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    command:
      - bash
      - -c
      - |
        PGPASSWORD=${POSTGRES_PASSWORD} psql -U ${POSTGRES_USER} -d ${POSTGRES_DB} --host postgresdb -c "CREATE USER ${GOTIFY_DATABASE_USER} WITH PASSWORD '${GOTIFY_DATABASE_PASSWORD}';"
        PGPASSWORD=${POSTGRES_PASSWORD} psql -U ${POSTGRES_USER} -d ${POSTGRES_DB} --host postgresdb -c "CREATE DATABASE ${GOTIFY_DATABASE_NAME} OWNER ${GOTIFY_DATABASE_USER};"
        PGPASSWORD=${POSTGRES_PASSWORD} psql -U ${POSTGRES_USER} -d ${POSTGRES_DB} --host postgresdb -c "GRANT ALL PRIVILEGES ON SCHEMA public TO ${GOTIFY_DATABASE_USER};"
# PGPASSWORD=${POSTGRES_PASSWORD} psql -U ${POSTGRES_USER} -d ${POSTGRES_DB} --host postgresdb -c "GRANT ALL PRIVILEGES ON DATABASE ${GOTIFY_DATABASE_NAME} TO ${GOTIFY_DATABASE_USER};"
    networks:
      - backend

  # --- init-gotify - setup gotify configuration file (config.yml)
  init-gotify:
    container_name: init-gotify
    image: debian:stable-slim
    restart: "no"
    entrypoint: ["/bin/bash", "-c"]
    command: ["ls -al /setup && ls -al /config && cp -f /setup/config.yml /config"]
    env_file: .env
    volumes:
      - /mnt/data/appdata/gotify/config:/config
      - ./config:/setup

  # --- gotify - run gotify service
  gotify:
    image: gotify/server
    container_name: gotify
    hostname: gotify
    volumes:
      - /mnt/data/appdata/gotify/data:/app/data
      - /mnt/data/appdata/gotify/config:/etc/gotify
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    networks:
      - frontend
      - backend
    env_file: .env
    environment:
      - TZ=Europe/Amsterdam
      # - GOTIFY_DATABASE_CONNECTION=host=postgresdb port=5432 user=gotify dbname=gotifydb password='Iif9deeng4hoht5caiphoh1Eesahqu' sslmode=disable
    depends_on:
      - postgresgotify
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.gotify.entrypoints=http"
      - "traefik.http.routers.gotify.rule=Host(`notify.moerman.online`)"
      - "traefik.http.middlewares.gotify-https-redirect.redirectscheme.scheme=https"
      - "traefik.http.routers.gotify.middlewares=gotify-https-redirect"
      - "traefik.http.routers.gotify-secure.entrypoints=https"
      - "traefik.http.routers.gotify-secure.rule=Host(`notify.moerman.online`)"
      - "traefik.http.routers.gotify-secure.tls=true"
      - "traefik.http.routers.gotify-secure.service=gotify"
      - "traefik.http.services.gotify.loadbalancer.server.port=80"
      - "traefik.docker.network=frontend"

networks:
  frontend:
    external: true
  backend:
    external: true