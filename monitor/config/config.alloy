logging {
  level = "info"
  format = "logfmt"
}

// ------ For live debugging, enable the block below and add `--stability.level=exeperimental` command line flag.
//livedebugging {
//  enabled = true
//}

// ------ Collect Samba logs
local.file_match "samba_logs" {
  path_targets = [
    {__path__ = "/var/log/samba/log.nmbd"},
  ]
  sync_period = "30s"
}
loki.source.file "samba_files" {
  targets       = local.file_match.samba_logs.targets
  forward_to    = [loki.process.add_samba_label.receiver]
}
loki.process "add_samba_label" {
  forward_to = [loki.write.grafana_loki.receiver]
  stage.static_labels {
    values = {
      "component" = "samba",
    }
  }
}

// ------ Collect Debian Dpkg logs
local.file_match "dpkg_logs" {
  path_targets = [
    {__path__ = "/var/log/dpkg.log"},
  ]
  sync_period = "1m"
}
loki.source.file "dpkg_files" {
  targets       = local.file_match.dpkg_logs.targets
  forward_to    = [loki.process.add_dpkg_label.receiver]
}
loki.process "add_dpkg_label" {
  forward_to = [loki.write.grafana_loki.receiver]
  stage.static_labels {
    values = {
      "component" = "dpkg",
    }
  }
}

// --- Collect journal logs
loki.source.journal "read"  {
  forward_to    = [loki.write.grafana_loki.receiver]
  relabel_rules = loki.relabel.journal.rules
  max_age       = "24h"
  labels        = {component = "loki.source.journal"}
  path          = "/var/log/journal"
}
loki.relabel "journal" {
  forward_to = []
  rule {
    source_labels = ["__journal__systemd_unit"]
    target_label  = "systemd_unit"
  }
  rule {
    source_labels = ["__journal__hostname"]
    target_label = "systemd_hostname"
  }
  rule {
    source_labels = ["__journal__transport"]
    target_label = "systemd_transport"
  }
}

// --- Collect Docker logs
discovery.docker "logs_integrations_docker" {
  host = "unix:///var/run/docker.sock"
  refresh_interval = "5s"
}
discovery.relabel "logs_integrations_docker" {
  targets = []
  rule {
    target_label = "job"
    replacement = "integrations/docker"
  }
  rule {
    target_label = "instance"
    replacement = constants.hostname
  }
  rule {
    source_labels = ["__meta_docker_container_name"]
    regex = "/(.*)"
    target_label = "container"
  }
  rule {
    source_labels = ["__meta_docker_container_log_stream"]
    target_label = "stream"
  }
}
loki.source.docker "logs_integrations_docker" {
  host = "unix:///var/run/docker.sock"
  targets = discovery.docker.logs_integrations_docker.targets
  forward_to = [loki.write.grafana_loki.receiver]
  //forward_to       = [loki.process.docker_local.receiver]
  relabel_rules = discovery.relabel.logs_integrations_docker.rules
  refresh_interval = "5s"
}
//loki.process "docker_local" {
//  forward_to = [loki.write.grafana_loki.receiver]
//  stage.json {
//    expressions = {
//      time = "",
//    }
//  }
//  stage.timestamp {
//    format = "RFC3339Nano"
//    source = "time"
//  }
//  stage.drop {
//    source = "timestamp"
//    older_than = "15m"
//    drop_counter_reason = "too old"
//  }
//}


// --- Send logs to Loki
loki.write "grafana_loki" {
  endpoint {
    url = "http://loki:3100/loki/api/v1/push"
  }
}
