# This Docker compose stack requires secrets in Komo.do:
# GRAFANA_DOMAIN
# AUTHENTIK_DOMAIN
# GF_AUTH_GENERIC_OAUTH_CLIENT_ID
# GF_AUTH_GENERIC_OAUTH_CLIENT_SECRET
# POSTGRES_DB
# POSTGRES_USER
# POSTGRES_PASSWORD
# GF_DATABASE_USER
# GF_DATABASE_PASSWORD
# GF_DATABASE_NAME
---
services:

  # prometheus:
  #   image: docker.io/prom/prometheus:v3.1.0
  #   container_name: prometheus
  #   user: 1000:1000
  #   ports:
  #     - 9090:9090
  #   command: "--config.file=/etc/prometheus/prometheus.yaml"
  #   volumes:
  #     - ./config/:/etc/prometheus/
  #     - /mnt/data/appdata/prometheus:/prometheus
  #   restart: unless-stopped
  #   networks:
  #     - backend

  # pginit-grafana:
  #   container_name: pginit-grafana
  #   hostname: pginit-grafana
  #   image: docker.io/library/postgres:16
  #   restart: "no"
  #   command:
  #     - bash
  #     - -c
  #     - |
  #       PGPASSWORD=${POSTGRES_PASSWORD} psql -U ${POSTGRES_USER} -d ${POSTGRES_DB} --host postgresdb -c "CREATE ROLE ${GF_DATABASE_USER} WITH LOGIN INHERIT NOREPLICATION BYPASSRLS CONNECTION LIMIT -1 PASSWORD '${GF_DATABASE_PASSWORD}';"
  #       PGPASSWORD=${POSTGRES_PASSWORD} psql -U ${POSTGRES_USER} -d ${POSTGRES_DB} --host postgresdb -c "CREATE DATABASE ${GF_DATABASE_NAME} WITH OWNER = ${GF_DATABASE_USER} ENCODING = 'UTF8' LOCALE_PROVIDER = 'libc' CONNECTION LIMIT = -1 IS_TEMPLATE = False;"
  #   networks:
  #     - backend

  # grafana:
  #   image: docker.io/grafana/grafana-oss:11.5.2
  #   container_name: grafana
  #   user: 1000:1000
  #   ports:
  #     - "3080:3000"
  #   volumes:
  #     - /mnt/data/appdata/grafana:/var/lib/grafana
  #   env_file: .env
  #   environment:
  #     GF_SERVER_ROOT_URL: "https://${GRAFANA_DOMAIN}"
  #     GF_DATABASE_TYPE: postgres
  #     GF_DATABASE_HOST: postgresdb
  #     GF_DATABASE_NAME: "${GF_DATABASE_NAME}"
  #     GF_DATABASE_USER: "${GF_DATABASE_USER}"
  #     GF_DATABASE_PASSWORD: "${GF_DATABASE_PASSWORD}"
  #     GF_AUTH_GENERIC_OAUTH_ENABLED: "true"
  #     GF_AUTH_GENERIC_OAUTH_NAME: "authentik"
  #     GF_AUTH_GENERIC_OAUTH_SCOPES: "openid profile email"
  #     GF_AUTH_GENERIC_OAUTH_AUTH_URL: "https://${AUTHENTIK_DOMAIN}/application/o/authorize/"
  #     GF_AUTH_GENERIC_OAUTH_TOKEN_URL: "https://${AUTHENTIK_DOMAIN}/application/o/token/"
  #     GF_AUTH_GENERIC_OAUTH_API_URL: "https://${AUTHENTIK_DOMAIN}/application/o/userinfo/"
  #     GF_AUTH_SIGNOUT_REDIRECT_URL: "https://${AUTHENTIK_DOMAIN}/application/o/grafana/end-session/"
  #     GF_AUTH_GENERIC_OAUTH_CLIENT_ID: "${GF_AUTH_GENERIC_OAUTH_CLIENT_ID}"
  #     GF_AUTH_GENERIC_OAUTH_CLIENT_SECRET: "${GF_AUTH_GENERIC_OAUTH_CLIENT_SECRET}"
  #     GF_AUTH_GENERIC_OAUTH_TLS_SKIP_VERIFY_INSECURE: "true"
  #     # Optionally enable auto-login (bypasses Grafana login screen)
  #     GF_AUTH_OAUTH_AUTO_LOGIN: "true"
  #     # Optionally map user groups to Grafana roles
  #     GF_AUTH_GENERIC_OAUTH_ROLE_ATTRIBUTE_PATH: "contains(groups, 'Grafana Admins') && 'Admin' || contains(groups, 'Grafana Editors') && 'Editor' || 'Viewer'"
  #   restart: unless-stopped
  #   depends_on:
  #     - pginit-grafana
  #   networks:
  #     - frontend
  #     - backend
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.grafana.entrypoints=http"
  #     - "traefik.http.routers.grafana.rule=Host(`${GRAFANA_DOMAIN}`)"
  #     - "traefik.http.middlewares.grafana-https-redirect.redirectscheme.scheme=https"
  #     - "traefik.http.routers.grafana.middlewares=grafana-https-redirect"
  #     - "traefik.http.routers.grafana-secure.entrypoints=https"
  #     - "traefik.http.routers.grafana-secure.rule=Host(`${GRAFANA_DOMAIN}`)"
  #     - "traefik.http.routers.grafana-secure.tls=true"
  #     - "traefik.http.routers.grafana.service=grafana"
  #     - "traefik.docker.network=frontend"
    
  # alloy:
  #   image: grafana/alloy:latest
  #   container_name: alloy
  #   volumes:
  #     - ./config:/etc/alloy
  #     - /var/log/journal:/var/log/journal:ro
  #     - /var/log/samba:/var/log/samba:ro
  #     - /var/run/docker.sock:/var/run/docker.sock:ro
  #   ports:
  #     - 12345:12345
  #   command: [
  #     "run",
  #     "--server.http.listen-addr=0.0.0.0:12345",
  #     "--stability.level=public-preview",
  #     "--storage.path=/var/lib/alloy/data",
  #     "/etc/alloy/config.alloy",
  #   ]
  #   restart: unless-stopped
  #   networks:
  #     - frontend
  #     - backend
  #   privileged: true
  #   cap_add:
  #     - SYS_PTRACE
  #   security_opt:
  #     - seccomp:unconfined

  # --- init-loki - Setup Loki configuration file (loki.yaml)
  init-loki:
    container_name: init-loki
    image: debian:stable-slim
    restart: "no"
    entrypoint: ["/bin/bash", "-c"]
    command: ["cp -f /setup/loki.yaml /etc/loki"]
    # env_file: .env
    volumes:
      - ./config:/setup
      - /mnt/data/appdata/loki/config:/etc/loki

  loki:
    container_name: loki
    image: grafana/loki:3.4.2
    user: 1000:1000
    command: ["-config.file=/etc/loki/loki.yaml", "-config.expand-env=true"]
    ports:
      - 3100:3100
    volumes:
      - /mnt/data/appdata/loki/config:/etc/loki
      - /mnt/data/appdata/loki/data:/loki
    # labels:
    #   - "traefik.enable=true"
    #   - "traefik.http.routers.loki.entrypoints=https"
    #   - "traefik.http.routers.loki.rule=Host(`${LOKI_DOMAIN}`)"
    #   - "traefik.http.routers.loki.tls=true"
    #   - "traefik.http.routers.loki.service=loki"
    #   - "traefik.http.services.loki.loadbalancer.server.port=3100"
      # - "traefik.http.routers.loki.middlewares=authentik@file"
    restart: unless-stopped
    networks:
      - backend
      # - frontend
    depends_on:
      - init-loki

  node_exporter:
    image: quay.io/prometheus/node-exporter:v1.9.0
    container_name: node_exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro,rslave
    command:
      - --path.procfs=/host/proc
      - --path.sysfs=/host/sys
      - --path.rootfs=/rootfs
      - --path.udev.data=/rootfs/run/udev/data
      - --collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)
      - --collector.interrupts
      - --collector.processes
    # pid: host
    restart: unless-stopped
    privileged: true
    cap_add:
      - SYS_PTRACE
    security_opt:
      - seccomp:unconfined
    networks:
      - backend

  cadvisor:
    image: gcr.io/cadvisor/cadvisor
    container_name: cadvisor
    # ports:
    #   - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    devices:
      - /dev/kmsg:/dev/kmsg
    privileged: true
    networks:
      - backend

networks:
  # frontend:
  #   external: true
  backend:
    external: true
