---
services:

  pginit-n8n:
    image: registry.moerman.online/ronmoerman/podtgres:16
    container_name: pginit-n8n
    hostname: pginit-n8n
    env_file: .env
    restart: "no"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - N8N_DATABASE_NAME=${N8N_DATABASE_NAME}
      - N8N_DATABASE_USER=${N8N_DATABASE_USER}
      - N8N_DATABASE_PASSWORD=${N8N_DATABASE_PASSWORD}
    command:
      - bash
      - -c
      - |
        PGPASSWORD=${POSTGRES_PASSWORD} psql -U ${POSTGRES_USER} -d ${POSTGRES_DB} --host postgresdb -c "CREATE USER ${N8N_DATABASE_USER} WITH PASSWORD '${N8N_DATABASE_PASSWORD}';"
        PGPASSWORD=${POSTGRES_PASSWORD} psql -U ${POSTGRES_USER} -d ${POSTGRES_DB} --host postgresdb -c "CREATE DATABASE ${N8N_DATABASE_NAME};"
        PGPASSWORD=${POSTGRES_PASSWORD} psql -U ${POSTGRES_USER} -d ${POSTGRES_DB} --host postgresdb -c "GRANT ALL PRIVILEGES ON DATABASE ${N8N_DATABASE_NAME} TO ${N8N_DATABASE_USER};"
        PGPASSWORD=${POSTGRES_PASSWORD} psql -U ${POSTGRES_USER} -d ${POSTGRES_DB} --host postgresdb -c "GRANT ALL ON ALL TABLES IN SCHEMA public TO ${N8N_DATABASE_USER};"
# PGPASSWORD=${POSTGRES_PASSWORD} psql -U ${POSTGRES_USER} -d ${POSTGRES_DB} --host postgresdb -c "CREATE USER ${N8N_DATABASE_USER} WITH PASSWORD '${N8N_DATABASE_PASSWORD}';"
# PGPASSWORD=${POSTGRES_PASSWORD} psql -U ${POSTGRES_USER} -d ${POSTGRES_DB} --host postgresdb -c "GRANT ALL PRIVILEGES ON DATABASE ${N8N_DATABASE_NAME} TO ${N8N_DATABASE_USER};"
# PGPASSWORD=${POSTGRES_PASSWORD} psql -U ${POSTGRES_USER} -d ${POSTGRES_DB} --host postgresdb -c "GRANT CREATE ON SCHEMA public TO ${N8N_DATABASE_USER};"
    networks:
      - backend

  # redisn8n:
  #   image: redis:6-alpine
  #   restart: always
  #   env_file: .env
  #   container_name: redisn8n
  #   hostname: redisn8n
  #   volumes:
  #     - /mnt/data/appdata/n8n/redis:/data:rw
  #   healthcheck:
  #     test: ['CMD', 'redis-cli', 'ping']
  #     interval: 5s
  #     timeout: 5s
  #     retries: 10
  #   networks:
  #     - backend
  
  n8n:
    image: registry.moerman.online/ronmoermen/n8n:1.84.1
    container_name: n8n
    hostname: n8n
    env_file: .env
    environment:
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgresdb
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=${N8N_DATABASE_NAME}
      - DB_POSTGRESDB_USER=${N8N_DATABASE_USER}
      - DB_POSTGRESDB_PASSWORD=${N8N_DATABASE_PASSWORD}
      - N8N_HOST=${N8N_DOMAIN}
      # - N8N_PATH=/n8n/
      - DB_POSTGRESDB_SCHEMA=n8n
      - EXECUTIONS_MODE=queue
      - QUEUE_BULL_REDIS_HOST=redis
      - QUEUE_HEALTH_CHECK_ACTIVE=true
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY}
      - N8N_SECURE_COOKIE=false
      - OFFLOAD_MANUAL_EXECUTIONS_TO_WORKERS=true
      - N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS=false
      - N8N_RUNNERS_ENABLED=true
      - N8N_PROXY_HOPS="1"
      - NODE_ENV=production
      - WEBHOOK_URL=https://${N8N_DOMAIN}
      - EXPRESS_TRUST_PROXY=true
      - GENERIC_TIMEZONE="Europe/Amsterdam"
      - TZ="Europe/Amsterdam"
    volumes:
      - /mnt/data/appdata/n8n/data:/home/node/.n8n
    ports:
      - 5678:5678
    restart: unless-stopped
    networks:
      - backend
      - frontend
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.n8n.entrypoints=http"
      - "traefik.http.routers.n8n.rule=Host(`${N8N_DOMAIN}`)"
      - "traefik.http.middlewares.n8n-https-redirect.redirectscheme.scheme=https"
      - "traefik.http.routers.n8n.middlewares=n8n-https-redirect"
      - "traefik.http.routers.n8n-secure.entrypoints=https"
      - "traefik.http.routers.n8n-secure.rule=Host(`${N8N_DOMAIN}`)"
      - "traefik.http.routers.n8n-secure.middlewares=authentik@file"
      - "traefik.http.routers.n8n-secure.tls=true"
      - "traefik.http.routers.n8n.service=n8n"
      - "traefik.http.services.n8n.loadbalancer.server.port=5678"
      - "traefik.docker.network=frontend"

  n8nworker:
    image: registry.moerman.online/ronmoermen/n8n:1.84.1
    container_name: n8nworker
    hostname: n8nworker
    command: worker
    restart: unless-stopped
    env_file: .env
    environment:
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgresdb
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=${N8N_DATABASE_NAME}
      - DB_POSTGRESDB_USER=${N8N_DATABASE_USER}
      - DB_POSTGRESDB_PASSWORD=${N8N_DATABASE_PASSWORD}
      - DB_POSTGRESDB_SCHEMA=n8n
      - NODE_ENV=production
      - EXECUTIONS_MODE=queue
      - QUEUE_BULL_REDIS_HOST=redis
      - QUEUE_HEALTH_CHECK_ACTIVE=true
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY}
      - GENERIC_TIMEZONE="Europe/Amsterdam"
      - TZ="Europe/Amsterdam"
    volumes:
      - /mnt/data/appdata/n8n/data:/home/node/.n8n
    depends_on:
      - n8n
    networks:
      - backend

networks:
  backend:
    external: true
  frontend:
    external: true
